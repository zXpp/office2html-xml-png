#!/usr/bin/python
# This script is to merge segment MLF files into one whole MLF file
# write these lines into another MLF file
#
import os,sys
mlf1 = open('/share/spandh.ami1/usr/yanxiong/tnet.tbl.sad/tbl.sad.mlf','r')
line1 = mlf1.readline() # read the first line
mlf2 = open('/share/spandh.ami1/usr/yanxiong/data/tbl.full.fbank/tbl.sad.mlf','wa')
mlf2.write(line1) # write the first line
num = 0
line1 = mlf1.readline() # read the second line
numofletter = 16
filename1 = line1[:numofletter] # extract file name
mlf2.write(line1[:numofletter]) # extract file name and then write 
NoofFinLett = -6
mlf2.write(line1[NoofFinLett:]) # the last 5 letters in this line
iter = 1 # number of merge iteration for one whole file
while True:
    line1 = mlf1.readline()
    if not line1:
        break
    if 'lab' in line1:
        iter = iter + 1
        if filename1 != line1[:numofletter]: # not belong to the same file
            mlf2.write('.') # write a line only containing one dot
            mlf2.write('\n')
            mlf2.write(line1[:numofletter]) # extract file name and then write 
            mlf2.write(line1[NoofFinLett:])
            filename1 = line1[:numofletter] # update variable of file name
            num = 0 # indicate new file starts
            iter = 1 # number of merge iteration for one whole file
        else:
            num = 1 # indicate file is the same file
            if iter > 2:
                endpoint = endpoint + int(line2[1]) # update endpoint in the same file
    elif 'SPEECH' in line1:
        line2 = line1.split() # split this into three columns
        if '-' in line2[0]:
            string = line2[0]
            line2[0] = string[1:] # assume the first letter is minus symbol,and delete the first letter
        if '-' in line2[1]:
            string = line2[1]
            line2[1] = string[1:] # assume the first letter is minus symbol,and delete the first letter
        if num == 0:
            mlf2.write(line1) # write this line into MLF file2
            endpoint = int(line2[1]) # extract end point of this segment and change it into integer from string
        else:    
            mlf2.write(str(int(line2[0]) + endpoint)) # write startpoint of this line based on the endpoint of the previous segment
            mlf2.write(' ')
            mlf2.write(str(int(line2[1]) + endpoint)) # write endpoint of this line based on the endpoint of the previous segment
            mlf2.write(' ')
            mlf2.write(line2[2]) # write the third column of this line
            mlf2.write('\n')
mlf2.write('.') # write a line only containing one dot
mlf1.close
mlf2.close            
